name: CI -> Deploy to EC2

on:
  push:
    branches: [ main ]

permissions:
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20.19.0'

      - name: Install dependencies & build
        run: |
          npm ci
          npm run build || echo "no build step"

      - name: Archive repo for deploy
        run: |
          zip -r release.zip . -x "node_modules/***" ".git/***" ".github/***" "dist/***" "README.md"

      - name: Prepare private key
        run: |
          echo "$SSH_PRIVATE_KEY" > ./deploy_key
          chmod 600 ./deploy_key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Upload release to server via scp
        run: |
          scp -o StrictHostKeyChecking=no -i ./deploy_key -P ${{ secrets.SSH_PORT }} release.zip ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/tmp/release.zip

      - name: Deploy on the remote server (unzip, rsync, npm install, pm2)
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -e
            mkdir -p ${{ secrets.EC2_TARGET_DIR }}
            # ensure unzip and rsync exist
            command -v unzip >/dev/null 2>&1 || sudo dnf install -y unzip
            command -v rsync >/dev/null 2>&1 || sudo dnf install -y rsync
            # unpack release and sync to target dir
            unzip -o /tmp/release.zip -d /tmp/release
            rsync -av --delete /tmp/release/ ${{ secrets.EC2_TARGET_DIR }}/
            cd ${{ secrets.EC2_TARGET_DIR }}
            # install production dependencies as deploy user
            sudo -u deploy npm ci --production
            # reload/start via pm2 using ecosystem file if present
            if [ -f ecosystem.config.js ]; then
              sudo pm2 reload ecosystem.config.js --env production || sudo pm2 start ecosystem.config.js --env production
            else
              sudo pm2 describe my-node-app && sudo pm2 restart my-node-app || sudo pm2 start app.js --name my-node-app
            fi
            sudo pm2 save
